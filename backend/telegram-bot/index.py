import json
import os
from typing import Dict, Any, List
import psycopg2
from datetime import datetime, time

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    '''
    Business: Telegram bot for contract delivery and reminders management
    Args: event - webhook from Telegram with updates
          context - cloud function context
    Returns: HTTP response for Telegram
    '''
    method: str = event.get('httpMethod', 'POST')
    
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type',
                'Access-Control-Max-Age': '86400'
            },
            'body': ''
        }
    
    if method != 'POST':
        return {
            'statusCode': 405,
            'headers': {'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': 'Method not allowed'})
        }
    
    try:
        body_data = json.loads(event.get('body', '{}'))
        
        if 'message' not in body_data and 'callback_query' not in body_data:
            return {'statusCode': 200, 'body': json.dumps({'ok': True})}
        
        telegram_token = os.environ.get('TELEGRAM_BOT_TOKEN', '')
        db_url = os.environ.get('DATABASE_URL', '')
        
        if 'callback_query' in body_data:
            return handle_callback_query(body_data['callback_query'], telegram_token, db_url)
        
        message = body_data.get('message', {})
        chat_id = message.get('chat', {}).get('id')
        text = message.get('text', '')
        user_id = message.get('from', {}).get('id')
        
        if text.startswith('/start'):
            send_main_menu(chat_id, telegram_token)
        elif text.startswith('/menu'):
            send_main_menu(chat_id, telegram_token)
        elif text.startswith('/reminders'):
            show_reminders_list(chat_id, user_id, telegram_token, db_url)
        else:
            send_message(chat_id, '–ò—Å–ø–æ–ª—å–∑—É–π /menu –¥–ª—è –≤—ã–∑–æ–≤–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é', telegram_token)
        
        return {
            'statusCode': 200,
            'headers': {'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'ok': True})
        }
        
    except Exception as e:
        return {
            'statusCode': 500,
            'headers': {'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': str(e)})
        }


def send_main_menu(chat_id: int, token: str):
    '''–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏'''
    keyboard = {
        'inline_keyboard': [
            [{'text': 'üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', 'callback_data': 'list_reminders'}],
            [{'text': '‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', 'callback_data': 'create_reminder'}],
            [{'text': 'üîî –û –±–æ—Ç–µ', 'callback_data': 'about'}]
        ]
    }
    
    send_message(
        chat_id,
        'ü§ñ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:',
        token,
        keyboard
    )


def show_reminders_list(chat_id: int, user_id: int, token: str, db_url: str):
    '''–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'''
    conn = psycopg2.connect(db_url)
    cur = conn.cursor()
    
    cur.execute('''
        SELECT id, title, reminder_time, days_of_week, is_active 
        FROM reminders 
        WHERE user_id = %s 
        ORDER BY reminder_time
    ''', (user_id,))
    
    reminders = cur.fetchall()
    cur.close()
    conn.close()
    
    if not reminders:
        keyboard = {
            'inline_keyboard': [
                [{'text': '‚ûï –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', 'callback_data': 'create_reminder'}],
                [{'text': '¬´ –ù–∞–∑–∞–¥', 'callback_data': 'main_menu'}]
            ]
        }
        send_message(chat_id, 'üìã –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π', token, keyboard)
        return
    
    days_names = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
    
    text = 'üìã *–¢–≤–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:*\n\n'
    keyboard_buttons = []
    
    for reminder in reminders:
        rid, title, rem_time, days, is_active = reminder
        status = '‚úÖ' if is_active else '‚ùå'
        days_str = ', '.join([days_names[d-1] for d in sorted(days)])
        
        text += f'{status} *{title}*\n'
        text += f'   ‚è∞ {rem_time.strftime("%H:%M")}\n'
        text += f'   üìÖ {days_str}\n\n'
        
        keyboard_buttons.append([{
            'text': f'{"‚úèÔ∏è" if is_active else "üîÑ"} {title}',
            'callback_data': f'edit_reminder_{rid}'
        }])
    
    keyboard_buttons.append([{'text': '‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ', 'callback_data': 'create_reminder'}])
    keyboard_buttons.append([{'text': '¬´ –ù–∞–∑–∞–¥', 'callback_data': 'main_menu'}])
    
    keyboard = {'inline_keyboard': keyboard_buttons}
    send_message(chat_id, text, token, keyboard)


def handle_callback_query(callback: Dict, token: str, db_url: str) -> Dict[str, Any]:
    '''–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏'''
    callback_id = callback.get('id')
    chat_id = callback.get('message', {}).get('chat', {}).get('id')
    user_id = callback.get('from', {}).get('id')
    data = callback.get('data', '')
    
    answer_callback(callback_id, token)
    
    if data == 'main_menu':
        send_main_menu(chat_id, token)
    
    elif data == 'list_reminders':
        show_reminders_list(chat_id, user_id, token, db_url)
    
    elif data == 'create_reminder':
        show_create_reminder_templates(chat_id, token)
    
    elif data == 'about':
        text = (
            'ü§ñ *–û –±–æ—Ç–µ*\n\n'
            '–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç:\n'
            '‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –≥–æ—Ç–æ–≤—ã–µ –¥–æ–≥–æ–≤–æ—Ä–∞\n'
            '‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏\n'
            '‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n\n'
            '–°–æ–∑–¥–∞–≤–∞–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–∞–π –∏—Ö –≤ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è!'
        )
        keyboard = {'inline_keyboard': [[{'text': '¬´ –ù–∞–∑–∞–¥', 'callback_data': 'main_menu'}]]}
        send_message(chat_id, text, token, keyboard)
    
    elif data.startswith('template_'):
        template_name = data.replace('template_', '')
        create_reminder_from_template(chat_id, user_id, template_name, token, db_url)
    
    elif data.startswith('edit_reminder_'):
        reminder_id = int(data.replace('edit_reminder_', ''))
        show_reminder_editor(chat_id, reminder_id, token, db_url)
    
    elif data.startswith('toggle_'):
        reminder_id = int(data.replace('toggle_', ''))
        toggle_reminder(reminder_id, db_url)
        show_reminder_editor(chat_id, reminder_id, token, db_url)
    
    elif data.startswith('delete_'):
        reminder_id = int(data.replace('delete_', ''))
        delete_reminder(reminder_id, db_url)
        send_message(chat_id, '‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ', token)
        show_reminders_list(chat_id, user_id, token, db_url)
    
    elif data.startswith('duplicate_'):
        reminder_id = int(data.replace('duplicate_', ''))
        duplicate_reminder(reminder_id, db_url)
        send_message(chat_id, '‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–æ', token)
        show_reminders_list(chat_id, user_id, token, db_url)
    
    return {
        'statusCode': 200,
        'headers': {'Access-Control-Allow-Origin': '*'},
        'body': json.dumps({'ok': True})
    }


def show_create_reminder_templates(chat_id: int, token: str):
    '''–ü–æ–∫–∞–∑–∞—Ç—å —à–∞–±–ª–æ–Ω—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π'''
    keyboard = {
        'inline_keyboard': [
            [{'text': 'üíß –ü–æ–ø–µ–π –≤–æ–¥—ã', 'callback_data': 'template_water'}],
            [{'text': 'üíä –í—ã–ø–µ–π —Ç–∞–±–ª–µ—Ç–∫—É', 'callback_data': 'template_pill'}],
            [{'text': 'üìñ –ü–æ—á–∏—Ç–∞–π –∫–Ω–∏–≥—É', 'callback_data': 'template_read'}],
            [{'text': 'üí™ –û—Ç–æ–∂–º–∏—Å—å', 'callback_data': 'template_pushups'}],
            [{'text': 'üßò –ú–µ–¥–∏—Ç–∞—Ü–∏—è', 'callback_data': 'template_meditation'}],
            [{'text': 'üö∂ –ü—Ä–æ–≥—É–ª–∫–∞', 'callback_data': 'template_walk'}],
            [{'text': '¬´ –ù–∞–∑–∞–¥', 'callback_data': 'main_menu'}]
        ]
    }
    
    send_message(
        chat_id,
        '‚ûï *–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ*\n\n–í—ã–±–µ—Ä–∏ —à–∞–±–ª–æ–Ω –∏–ª–∏ —Å–æ–∑–¥–∞–π —Å–≤–æ–µ:',
        token,
        keyboard
    )


def create_reminder_from_template(chat_id: int, user_id: int, template: str, token: str, db_url: str):
    '''–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–∑ —à–∞–±–ª–æ–Ω–∞'''
    templates = {
        'water': ('üíß –ü–æ–ø–µ–π –≤–æ–¥—ã', '–í—ã–ø–µ–π —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è', '10:00'),
        'pill': ('üíä –í—ã–ø–µ–π —Ç–∞–±–ª–µ—Ç–∫—É', '–ù–µ –∑–∞–±—É–¥—å –ø—Ä–∏–Ω—è—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ', '09:00'),
        'read': ('üìñ –ü–æ—á–∏—Ç–∞–π –∫–Ω–∏–≥—É', '–£–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è —á—Ç–µ–Ω–∏—é', '20:00'),
        'pushups': ('üí™ –û—Ç–æ–∂–º–∏—Å—å', '–°–¥–µ–ª–∞–π 20 –æ—Ç–∂–∏–º–∞–Ω–∏–π', '08:00'),
        'meditation': ('üßò –ú–µ–¥–∏—Ç–∞—Ü–∏—è', '10 –º–∏–Ω—É—Ç –º–µ–¥–∏—Ç–∞—Ü–∏–∏', '07:00'),
        'walk': ('üö∂ –ü—Ä–æ–≥—É–ª–∫–∞', '–ü—Ä–æ–≥—É–ª—è—Ç—å—Å—è –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ', '18:00')
    }
    
    if template not in templates:
        return
    
    title, description, default_time = templates[template]
    
    conn = psycopg2.connect(db_url)
    cur = conn.cursor()
    
    cur.execute('''
        INSERT INTO reminders (user_id, title, description, reminder_time, days_of_week, is_active)
        VALUES (%s, %s, %s, %s, %s, %s)
        RETURNING id
    ''', (user_id, title, description, default_time, [1,2,3,4,5,6,7], True))
    
    reminder_id = cur.fetchone()[0]
    conn.commit()
    cur.close()
    conn.close()
    
    send_message(chat_id, f'‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ "{title}" —Å–æ–∑–¥–∞–Ω–æ –Ω–∞ {default_time} –∫–∞–∂–¥—ã–π –¥–µ–Ω—å', token)
    show_reminder_editor(chat_id, reminder_id, token, db_url)


def show_reminder_editor(chat_id: int, reminder_id: int, token: str, db_url: str):
    '''–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'''
    conn = psycopg2.connect(db_url)
    cur = conn.cursor()
    
    cur.execute('''
        SELECT title, description, reminder_time, days_of_week, is_active 
        FROM reminders 
        WHERE id = %s
    ''', (reminder_id,))
    
    result = cur.fetchone()
    cur.close()
    conn.close()
    
    if not result:
        send_message(chat_id, '‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', token)
        return
    
    title, description, rem_time, days, is_active = result
    
    days_names = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
    days_str = ', '.join([days_names[d-1] for d in sorted(days)])
    status = '‚úÖ –ê–∫—Ç–∏–≤–Ω–æ' if is_active else '‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ'
    
    text = (
        f'‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–æ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è*\n\n'
        f'*{title}*\n'
        f'{description}\n\n'
        f'‚è∞ –í—Ä–µ–º—è: {rem_time.strftime("%H:%M")}\n'
        f'üìÖ –î–Ω–∏: {days_str}\n'
        f'–°—Ç–∞—Ç—É—Å: {status}'
    )
    
    toggle_text = 'üî¥ –í—ã–∫–ª—é—á–∏—Ç—å' if is_active else 'üü¢ –í–∫–ª—é—á–∏—Ç—å'
    
    keyboard = {
        'inline_keyboard': [
            [{'text': toggle_text, 'callback_data': f'toggle_{reminder_id}'}],
            [{'text': 'üìã –î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å', 'callback_data': f'duplicate_{reminder_id}'}],
            [{'text': 'üóë –£–¥–∞–ª–∏—Ç—å', 'callback_data': f'delete_{reminder_id}'}],
            [{'text': '¬´ –ö —Å–ø–∏—Å–∫—É', 'callback_data': 'list_reminders'}]
        ]
    }
    
    send_message(chat_id, text, token, keyboard)


def toggle_reminder(reminder_id: int, db_url: str):
    '''–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'''
    conn = psycopg2.connect(db_url)
    cur = conn.cursor()
    
    cur.execute('''
        UPDATE reminders 
        SET is_active = NOT is_active, updated_at = CURRENT_TIMESTAMP
        WHERE id = %s
    ''', (reminder_id,))
    
    conn.commit()
    cur.close()
    conn.close()


def delete_reminder(reminder_id: int, db_url: str):
    '''–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ'''
    conn = psycopg2.connect(db_url)
    cur = conn.cursor()
    
    cur.execute('DELETE FROM reminders WHERE id = %s', (reminder_id,))
    
    conn.commit()
    cur.close()
    conn.close()


def duplicate_reminder(reminder_id: int, db_url: str):
    '''–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ'''
    conn = psycopg2.connect(db_url)
    cur = conn.cursor()
    
    cur.execute('''
        INSERT INTO reminders (user_id, title, description, reminder_time, days_of_week, is_active)
        SELECT user_id, title || ' (–∫–æ–ø–∏—è)', description, reminder_time, days_of_week, is_active
        FROM reminders
        WHERE id = %s
    ''', (reminder_id,))
    
    conn.commit()
    cur.close()
    conn.close()


def send_message(chat_id: int, text: str, token: str, keyboard: Dict = None):
    '''–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram'''
    import requests
    
    url = f'https://api.telegram.org/bot{token}/sendMessage'
    
    data = {
        'chat_id': chat_id,
        'text': text,
        'parse_mode': 'Markdown'
    }
    
    if keyboard:
        data['reply_markup'] = json.dumps(keyboard)
    
    requests.post(url, json=data)


def answer_callback(callback_id: str, token: str):
    '''–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback query'''
    import requests
    
    url = f'https://api.telegram.org/bot{token}/answerCallbackQuery'
    requests.post(url, json={'callback_query_id': callback_id})
